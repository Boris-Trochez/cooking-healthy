name: Deploy to AWS S3 (Subdomain)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Fetch environment variables from AWS SSM
        run: |
          echo "Fetching environment variables from AWS SSM..."
          echo "VITE_API_LAMBDA_READ_DYNAMODB=$(aws ssm get-parameter --name '/boris-dev/dev/VITE_API_LAMBDA_READ_DYNAMODB' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "VITE_API_LAMBDA_URL=$(aws ssm get-parameter --name '/boris-dev/dev/VITE_API_LAMBDA_URL' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "VITE_API_LAMBDA_WRITE_DYNAMODB=$(aws ssm get-parameter --name '/boris-dev/dev/VITE_API_LAMBDA_WRITE_DYNAMODB' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV

      - name: Build project
        run: npm run build
        env:
          VITE_API_LAMBDA_READ_DYNAMODB: ${{ env.VITE_API_LAMBDA_READ_DYNAMODB }}
          VITE_API_LAMBDA_URL: ${{ env.VITE_API_LAMBDA_URL }}
          VITE_API_LAMBDA_WRITE_DYNAMODB: ${{ env.VITE_API_LAMBDA_WRITE_DYNAMODB }}

      - name: Deploy to S3
        run: aws s3 sync ./dist s3://$S3_BUCKET_NAME --delete
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME_PRODUCTION }}

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_PRODUCTION_ID --paths "/*"
        env:
          CLOUDFRONT_PRODUCTION_ID: ${{ secrets.CLOUDFRONT_PRODUCTION_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
